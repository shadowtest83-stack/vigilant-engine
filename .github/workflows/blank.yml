name: Continuous Persistent VPS

on:
  schedule:
    - cron: '0 */6 * * *'   # fallback trigger every 6 hours
  workflow_dispatch:

jobs:
  vps-session:
    runs-on: ubuntu-latest
    timeout-minutes: 330   # 5h30m max runtime

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set hostname to biralo
        run: sudo hostnamectl set-hostname biralo

      - name: Download VPS backup (if any)
        uses: actions/download-artifact@v4
        with:
          name: vps-backup
          path: ./backup
        continue-on-error: true

      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install -y tmate curl unzip sudo net-tools neofetch rsync zip

      - name: Install Tailscale official script
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Restore full VPS backup
        run: |
          if [ -f ./backup/backup.zip ]; then
            echo "Restoring full VPS..."
            sudo unzip -o ./backup/backup.zip -d /

            # Reload services
            sudo systemctl daemon-reexec || true
            sudo systemctl daemon-reload || true

            # Restart all enabled services
            for svc in $(systemctl list-unit-files --state=enabled --no-pager --no-legend | awk '{print $1}'); do
              sudo systemctl restart "$svc" || true
            done

            # Restart only containers that were running before backup
            if command -v docker >/dev/null 2>&1; then
              sudo systemctl restart docker || true
              sleep 5
              if [ -f /opt/vps-backup/data/running-containers.list ]; then
                echo "Restoring Docker containers..."
                for c in $(cat /opt/vps-backup/data/running-containers.list); do
                  sudo docker start "$c" || true
                done
              fi
            fi
          else
            echo "No backup found, starting fresh"
          fi

      - name: Restore Tailscale state
        run: |
          if [ -f /opt/vps-backup/data/tailscaled.state ]; then
            sudo mkdir -p /var/lib/tailscale
            sudo cp /opt/vps-backup/data/tailscaled.state /var/lib/tailscale/tailscaled.state
            sudo chmod 600 /var/lib/tailscale/tailscaled.state
          fi

      - name: Start Tailscale
        run: |
          sudo tailscaled &
          sleep 8
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=biralo || echo "Tailscale already up"

      - name: Create user biralo with sudo
        run: |
          if ! id -u biralo >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash biralo
            echo "biralo:biralo" | sudo chpasswd
            sudo usermod -aG sudo biralo
            echo "biralo ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/biralo
          fi

      - name: Start tmate session for SSH access
        uses: mxschmitt/action-tmate@v3

      - name: Show Tailscale IP
        run: |
          echo "ðŸ”— Tailscale IP:"
          tailscale ip -4 || echo "Tailscale IP not found"

      - name: Sleep until restart
        run: sleep 19800   # 5h30m (19800s)

      - name: Backup full VPS filesystem
        run: |
          sudo mkdir -p /opt/vps-backup/data
          sudo cp /var/lib/tailscale/tailscaled.state /opt/vps-backup/data/ || true

          # Save running container list
          if command -v docker >/dev/null 2>&1; then
            sudo docker ps -q > /opt/vps-backup/data/running-containers.list || true
          fi

          echo "Creating full backup..."
          sudo rsync -aAX \
            --exclude={"/opt/vps-backup","/proc/*","/sys/*","/dev/*","/tmp/*","/run/*"} \
            / /opt/vps-backup/full

          cd /
          sudo zip -r /backup.zip opt/vps-backup

      - name: Upload VPS backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup
          path: /backup.zip
          retention-days: 90

      - name: Auto-dispatch next run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Triggering next run..."
          gh workflow run "Continuous Persistent VPS" || true
